SBox = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]


def getSDiff(x, y):
    return SBox[x] ^ SBox[y]


def mul_by_01(num):
    return num


def mul_by_02(num):
    if num < 0x80:
        res = (num << 1)
    else:
        res = (num << 1) ^ 0x1b

    return res % 0x100


def mul_by_03(num):
    return mul_by_02(num) ^ num


# # 传入两个数，计算S(x) ^ S(y)
# def getSDiff(x, y):
#     return SBox[x] ^ SBox[y]


# # 乘2，前面讲过的乘法规则
# def mul_by_02(num):
#     if num < 0x80:
#         res = (num << 1)
#     else:
#         res = (num << 1) ^ 0x1b
#     return res % 0x100


# diff 1
diff = 0x10  # 输出差分为0x10的情况下：
# 使用集合去重
zlist = set({})
# 遍历z
for z in range(0x100):
    # 遍历y0
    for y0 in range(0x100):
        tmp = getSDiff(y0, mul_by_02(z) ^ y0)  # 输出差分 C + C' = S(Y0) + S(Y0 + 2Z)
        if tmp == diff:
            zlist.add(z)
print(len(zlist))

# diff 2
z1list = set({})
z2list = set({})
z3list = set({})
z4list = set({})
zlist = set({})
for z in range(0x100):
    for y0 in range(0x100):
        tmp = getSDiff(y0, mul_by_02(z) ^ y0)  # 输入差分： C0 + C0' = S(Y0) + S(Y0 + 2Z)   [p38]
        if tmp == (0x8d ^ 0x47):  # 输出差分
            z1list.add(z)

    for y1 in range(0x100):
        tmp = getSDiff(y1, mul_by_03(z) ^ y1)  # 输出差分：C7 + C7' = S(Y1) + S(Y1 + 3Z)    [p38]
        if tmp == (0x3a ^ 0x29):  # 输出差分
            z2list.add(z)

    for y3 in range(0x100):
        tmp = getSDiff(y3, z ^ y3)  # 输出差分：C10 + C10' = S(Y2) + S(Y2 + Z)             [p38]
        if tmp == (0xd0 ^ 0x84):  # 输出差分
            z3list.add(z)

    for y4 in range(0x100):
        tmp = getSDiff(y4, z ^ y4)  # 输出差分：C13 + C13' = S(Y3) + S(Y3 + Z)             [p38]
        if tmp == (0xe4 ^ 0x4b):  # 输出差分
            z4list.add(z)

print(len(z1list))
print(len(z2list))
print(len(z3list))
print(len(z4list))

# (P34)      正常推导:  C0=S(2A+3B+C+D ^K[9,0]) ^ K[10,0]; C0'=S(2X+3B+C+D ^ K[9,0]) ^ K[10,0]
# (P36/P41)  建立公式:  C0^C0' = S(Y0)^S(Y0+2Z)
# (P38/P41)  根据输出差分，筛选出输出差分
# 求交集，即满足4个输出差分条件的输入差分(z)
zlist = set.intersection(z1list, z2list, z3list, z4list)
# print(zlist)

# (p41)      根据确定的输出差分、有限个输入差分[Z]，筛选出满足要求的Y0；
# z 输入差分筛选出一些值
y0list = set({})  # 把y0的范围拿到
for z in zlist:
    for y0 in range(0x100):
        tmp = getSDiff(y0, mul_by_02(z) ^ y0)
        if tmp == (0x8d ^ 0x47):
            y0list.add(y0)
print(">>>>>")
print(len(y0list))

# C0 = S(2A+3B+C+D+K9,0)+K10,0 = S(Y0)+K10,0
# (P42)      根据输出和筛选出的Y，筛选出K(子密钥) => 正常输出C0=S(Y)^K(10,0)，所以K(10,0)=S(Y)^C0
k12 = set({})
for y0 in list(y0list):
    k12.add(SBox[y0] ^ 0x8d)
print(k12)

"""
# 第1次注入
k1 = {131, 132, 11, 12, 19, 20, 155, 156, 162, 165, 42, 45, 50, 53, 186, 189, 64, 71, 200, 207, 208, 215, 88, 97, 102, 233, 241, 246, 121, 126}
# 第2次注入
k2 = {129, 130, 4, 7, 16, 19, 149, 150, 168, 171, 45, 46, 57, 58, 188, 65, 66, 196, 199, 208, 211, 85, 86, 104, 107, 237, 249, 250, 124, 127}
# 第3次注入
k3 = {2, 133, 139, 12, 19, 148, 154, 29, 35, 170, 45, 50, 181, 187, 60, 193, 70, 72, 207, 208, 87, 89, 222, 224, 103, 105, 241, 118, 120, 255}
# 第4次注入
k4 = {18, 147, 148, 21, 26, 155, 156, 29, 162, 35, 165, 170, 43, 44, 173, 208, 81, 86, 215, 216, 89, 94, 223, 96, 225, 230, 103, 104, 233, 111}
# 求交集
klist = set.intersection(k1,k2,k3,k4)
print(klist)
"""